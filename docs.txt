° FERRAMENTAS SENDO UTILIZADAS NECESSÁRIO instalação
    - Django
    - Pillow
    - requests
    - matplotlib
    - djangorestframework
    - django-cors-headers

Templates - models.py: fica as tabelas do banco de dados, os modelos(classes)
Views - views.py: lida com a lógica e gerencia o fluxo de dados, a view é renderizada a partir de uma url
Templates - template.html: renderiza o HTML

° CRIANDO AMBIENTE VIRTUAL

no terminal
py -m venv "nome do ambiente"
ou 
python3 -m venv "nome"

° ATIVAR O AMBIENTE VIRTUAL

no terminal
    ° windows: "nome do ambiente"\scripts\activate 
    ° linux: source "nome do ambiente"\scripts\activate 
        ou . "nome do ambiente"\bin\activate 

° INSTALAR DJANGO
no terminal 
    ° windows: py -m pip install Django
    ° linux: python3 -m pip install Django

° Verificar instalação
no terminal
djn
django-admin --version

° Criando projeto
no terminal
django-admin startproject "Nome do projeto" . 
- para criar sem uma subpata usar "."
    * o manage.py é o arquivo de execução do projeto

° Executar o projeto

py manage.py runserver
abrir no navegador no ip informado no terminal

° Criar app
py manage.py startapp "nome"


- urls ficam as rotas da página

=========================================================================

CRUD

* No arquivo models do app ficam as tabelas do banco de dados

° Criar arquivo de configuração do banco
    py manage.py makemigrations 

° verificar se o modelo foi criado
    ir na pasta migrations do app e ver se tem um arquivo novo, geralmente o arquivo começa com 000

* automaticamente já cria um campo id primary key, ele é implementado automaticamente também nas inserções

° Criar tabela
    py manage.py migrate 

    * vai criar também as tabelas que vem por padrão no django, umas 18

* Consultar banco de dados pelo vscode
    - Instalar extensão do sqlite
    - Ir no arquivo do sqlite na raiz do projeto
    - botão direito nele
    - clicar em open database

° inserindo via terminal
    py manage.py shell
        vai abri uma interface de comandos sql
    
    * importar o model usuário primeiro!!!!
        from app.models import Usuario 
        user1 = Usuario(nome="Pedrao", email="pedrao@gmail.com", senha="pedrao123") 
        user1.save()

        * não esquecer do save, porque ele que realmente insere no banco  

° Mostrando todos os dados da tabela Usuario (Select *)
    Usuario.objects.all().values()


° O django oferece um jeito de criar formulários
    - criar arquivo forms.py na pasta do app

    * importar o forms do django
        from django import forms

* Sempre que trabalhar com formulário precisa colocar o csrf_token, caso contrário dará erro no arquivo
    ° isso porque o django exige um tratamento de criptografia com os dados

Dia 26/04/25 - Criando o sistema de cadastro de produtos

Para usar o cadastro de imagem precisa usar o Pillow

    ° python3/py -m pip install Pillow

Dia 9/5/2025 - Sistema de login, sessão e página welcome

Basta criar uma sessão quando o usuário loga e verificar se ela esta ativa

Dia 16/05/25 - admin

° Criar um usuário administrador
    * parar o servidor!!!
    - py manage.py createsuperuser
        vai pedir o user, email e senha, o email é opcional

    Admin que criei:
        USER: danielzornek
        SENHA: car123

    ° Para as tabelas aparecerem no painel de admin tem que ir no arquivo0 admin e colocar as tabelas
    admin.site.register(model/tabela)

    ° Personalizar o modo como os modelos vão aparecer no painel:
        - ir no arquivo models, na modelo usar a função __str__, comoo:

        def __str__(self):
            return f"Nome: {self.nome} | Email: ({self.email})"

        - No arquivo admin criar uma classe que herde admin
        Essa segunda forma vai exibir em formato de coluna os dados

° Instalar requests para consumir api
    py -m pip instal requests

DIA 21/05/25 - Alterando o modelo Usuario para possibilitar inserção de sua localidade e usando 
a ViaCEP API | Criando chaves estrangeiras e relacionamentos (Modelo Produto(Veículo) e Categoria)

* Como são muitos campos é melhor adicionar isso nos campos do model para definir algum valor default
    ° default="Desconhecida", ficando logradouro = models.CharField(max_length=100, default="Desconhecida")
* Lembrando os comandos para alterar o modelos
    - py manage.pt makemigrations
    - py manage.py migrate

Dia 30/05
    Criação de gráficos e apis

    * Para fazer gráficos e exibí-los em formato de image, necessita-se de duas bibliotecas
    pip install matplotlib pillow

    ° matplotlib: para fazer o gráfico;
    ° pillow: para gerar imagens (já utilizando por conta das imagens dos produtos)

    Trabalhandop com API

    * Bibliotecas necessárias
    
    ° djangorestframework: permite a criação de api;
    ° django-cors-headers: permite as requisições http.

    py -m pip install djangorestframework django-cors-headers

    * IR NO ARQUIVO SETTINGS.PY DO PROJETO

        - Em Installed apps adicionar:
            'rest_framework',
            'corsheaders',
        - Em middleware:
            'corsheaders.middleware.CorsMiddleware'

    Criando a API
        - Ir na tabela migrations que deseja disponibizar
        - Em fields alterar o atributo do id Serialized para True
        - Novamente fazer os migrates para alterar isso
        - Criar arquivo Serializer que vai disponibizaro JSON
        - criar as classes das models que mostrará os dados 